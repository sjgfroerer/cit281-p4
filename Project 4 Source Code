// Question and answer data array
const data = [
    {
      question: "Q1",
      answer: "A1",
    },
    {
      question: "Q2",
      answer: "A2",
    },
    {
      question: "Q3",
      answer: "A3",
    },
  ];
  
  // Export statement must be below data declaration - no hoisting with const
  module.exports = {
    data,
  };//Update web server code to import Fastify and fs packages, and data const
// Import module files
const {data} = require("./p4-data.js");


//console.log(data);

//Returns an array of strings where each array element is a question.
function getQuestions(){
    return data.map(({question}) => question);
}
console.log(getQuestions(data));

//Returns an array of strings where each array element is an answer.
function getAnswers(){
    return data.map(({answer}) => answer);
}
console.log(getAnswers(data));

//Returns a copy of the original data array of objects.
function getQuestionsAnswers(data){
    return(copiedData = [...data]);

}
console.log(getQuestionsAnswers(data));

//Returns an object with the following properties: question, number, error
function getQuestion(number = "") {
   
    let objectQ = {
        question: "",
        number: "",
        error: ""}

    if (!Number.isInteger(number)) {
        return objectQ.error = "Question number must be an integer"
    } else if (number < 1) {
        return objectQ.error = "Question number must be >= 1"
    } else if (number > 3) {
        return objectQ.error = "Question number must be less than the number of questions (3)"
    } else {
        objectQ.question = data[(number-1)].question ; objectQ.number = (number)
    }
        return objectQ
}
console.log(getQuestion(3));

//Returns an object with the following properties: answer, number, error
function getAnswer(number = "") { 
    let objectA = {
        answer: "",
        number: "",
        error: ""}

    if (!Number.isInteger(number)) {
        return objectA.error = "Answer number must be an integer"
    } else if (number < 1) {
        return objectA.error = "Answer number must be >= 1"
    } else if (number > 3) {
        return objectA.error = "Answer number must be less than the number of questions (3)"
    } else {
        objectA.answer = data[(number-1)].answer ; objectA.number = (number)
    }
        return objectA
}
console.log(getAnswer(3));








//getQuestionAnswer(number = "")
function getQuestionAnswer(number = "") {
   
    let objectQA = {
        question: "",
        answer: "",
        number: "",
        error: ""}

    if (!Number.isInteger(number)) {
        return objectQA.error = "Question number must be an integer"
    } else if (number < 1) {
        return objectQA.error = "Question number must be >= 1"
    } else if (number > 3) {
        return objectQA.error = "Question number must be less than the number of questions (3)"
    } else {
        objectQA.answer = data[(number-1)].answer ; 
        objectQA.question = data[(number-1)].question ;  
        objectQA.number = (number) ; 
    }
        return objectQA
};
console.log(getQuestionAnswer(2));


/*****************************
  Module function testing
******************************/
function testing(category, ...args) {
    console.log(`\n** Testing ${category} **`);
    console.log("-------------------------------");
    for (const o of args) {
      console.log(`-> ${category}${o.d}:`);
      console.log(o.f);
    }
  }
  
  // Set a constant to true to test the appropriate function
  const testGetQs = false;
  const testGetAs = false;
  const testGetQsAs = false;
  const testGetQ = false;
  const testGetA = false;
  const testGetQA = false;
  const testAdd = false;      // Extra credit
  const testUpdate = false;   // Extra credit
  const testDelete = false;   // Extra credit

  // getQuestions()
if (testGetQs) {
    testing("getQuestions", { d: "()", f: getQuestions() });
  }
  
  // getAnswers()
  if (testGetAs) {
    testing("getAnswers", { d: "()", f: getAnswers() });
  }
  
  // getQuestionsAnswers()
  if (testGetQsAs) {
    testing("getQuestionsAnswers", { d: "()", f: getQuestionsAnswers() });
  }
  
  // getQuestion()
  if (testGetQ) {
    testing(
      "getQuestion",
      { d: "()", f: getQuestion() },      // Extra credit: +1
      { d: "(0)", f: getQuestion(0) },    // Extra credit: +1
      { d: "(1)", f: getQuestion(1) },
      { d: "(4)", f: getQuestion(4) }     // Extra credit: +1
    );
  }
  
  // getAnswer()
  if (testGetA) {
    testing(
      "getAnswer",
      { d: "()", f: getAnswer() },        // Extra credit: +1
      { d: "(0)", f: getAnswer(0) },      // Extra credit: +1
      { d: "(1)", f: getAnswer(1) },
      { d: "(4)", f: getAnswer(4) }       // Extra credit: +1
    );
  }
  
  // getQuestionAnswer()
  if (testGetQA) {
    testing(
      "getQuestionAnswer",
      { d: "()", f: getQuestionAnswer() },    // Extra credit: +1
      { d: "(0)", f: getQuestionAnswer(0) },  // Extra credit: +1
      { d: "(1)", f: getQuestionAnswer(1) },
      { d: "(4)", f: getQuestionAnswer(4) }   // Extra credit: +1
    );
  }


    // Export statement must be below data declaration - no hoisting with const
    module.exports = {
        getQuestions,
        getAnswers,
        getQuestionsAnswers,
        getQuestion,
        getAnswer,
        getQuestionAnswer,
      };
// Import module files
const fastify = require("fastify")();
const { getQuestions, getAnswers, getQuestionsAnswers, getQuestion, getAnswer, getQuestionAnswer } = require("./p4-module.js");

fastify.get("/cit/question", (request, reply) => { 
    reply
        .code(200)
        .header("Content-Type", "application/json; charset=utf-8")
        .send({error: "", statuscode: 200, questions: getQuestions() });
})

fastify.get("/cit/answer", (request, reply) => { 
    reply
        .code(200)
        .header("Content-Type", "application/json; charset=utf-8")
        .send({error: "", statuscode: 200, answers: getAnswers() });
})

fastify.get("/cit/questionanswer", (request, reply) => { 
    
    reply
        .code(200)
        .header("Content-Type", "application/json; charset=utf-8")
        .send({error: "", statuscode: 200, questions: getQuestions(1), answers: getAnswers(1) });
})



fastify.get("/cit/question/:number", (request, reply) => { 

    reply
        .code(200)
        .header("Content-Type", "application/json; charset=utf-8")
        .send({error: "", statuscode: 200, question: "Q1", number: "1" });
})



fastify.get("*", (request, reply) => { 

    reply
        .code(200)
        .header("Content-Type", "application/json; charset=utf-8")
        .send({error: "Route not found", statuscode: 404 });
})



// Start server and listen to requests using Fastify
const listenIP = "localhost";
const listenPort = 8080;
fastify.listen(listenPort, listenIP, (err, address) => {
  if (err) {
    console.log(err);
    process.exit(1);
  }
  console.log(`Server listening on ${address}`);
});
